#Veli Karag√ºl
define ROOT     C:\Program Files (x86)\nxlog
define CERTDIR  %ROOT%\cert
define CONFDIR  %ROOT%\conf
define LOGDIR   %ROOT%\data
define LOGFILE  %LOGDIR%\nxlog.log

define ROOT C:\Program Files (x86)\nxlog

LogFile   %ROOT%\data\nxlog.log
Moduledir %ROOT%\modules
CacheDir  %ROOT%\data
Pidfile   %ROOT%\data\nxlog.pid
SpoolDir  %ROOT%\data

<Extension _syslog>
    Module      xm_syslog
</Extension>

<Extension _charconv>
    Module      xm_charconv
    AutodetectCharsets iso8859-2, utf-8, utf-16, utf-32
</Extension>


<Extension fileop>
	Module 		xm_fileop
</Extension>

 <Extension json>
    Module      xm_json
</Extension>

<Extension _exec>
    Module      xm_exec
</Extension>


<Extension gelf>
    Module      xm_gelf


    # Check the size of our log file hourly, rotate if larger than 5MB
    <Schedule>
        Every   1 hour
        Exec    if (file_exists('%LOGFILE%') and \
                   (file_size('%LOGFILE%') >= 5M)) \
                    file_cycle('%LOGFILE%', 8);
    </Schedule>

    # Rotate our log file every week on Sunday at midnight
    <Schedule>
        When    @weekly
        Exec    if file_exists('%LOGFILE%') file_cycle('%LOGFILE%', 8);
    </Schedule>
</Extension>

# Snare compatible example configuration
# Collecting event log

 <Input in>
     Module      im_msvistalog
 </Input>
 
#Converting events to Snare format and sending them out over TCP gelf
<Output out>
    Module       om_tcp
     Host        graylog_ip 	
     Port        port_number_opened_in_graylog           	
     OutputType  GELF_TCP
 </Output>


# Connect input 'in' to output 'out'
 <Route 1>
     Path        in => out
 </Route>








